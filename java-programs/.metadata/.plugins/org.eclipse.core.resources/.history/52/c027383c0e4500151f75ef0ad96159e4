public class PillarsDivTwo {

    public double lengthCalculate(int a, int b, int w) {
        return Math.sqrt(Math.pow(w, 2) + Math.pow(b - a, 2));
    }

    public double maximalLength(int[] height, int w) {
        double dp1[] = new double[height.length]; // 1
        double dp2[] = new double[height.length]; // height[i]
        double dp[] = new double[height.length];
        int prev = 0;

        for (int i = 1; i < dp2.length; i++) {
            dp1[i] = lengthCalculate(1, height[i - 1], w);
            dp2[i] = lengthCalculate(height[i], 1, w);
            dp[i] = Math.max(dp[i - prev] + Math.max(dp1[i], dp2[i]), dp[i - prev] + Math.max(dp1[i], dp2[i]));
            if (dp1[i] > dp2[i])
                prev = 1;
            else {
                prev = 2;
            }

        }
        return dp[height.length - 1];
    }
}
