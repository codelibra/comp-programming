public class BearSortsDiv2 {
    
    public Integer arrayList[];

    public  void swap(int a, int b) {
        Integer tempInteger = arrayList[a];
        arrayList[a] = arrayList[b];
        arrayList[b] = tempInteger;
    }
    
    public  void merge(int lo, int mid, int hi){
        Integer temp[] = new Integer[10];
        
        int i=lo, j=mid+1, k=lo;
        while(i<=mid && j<=hi){
            if(arrayList[i]<arrayList[j])
            {
                temp[k] = arrayList[i];
                i++;
                k++;
            }
            else{
                temp[k] = arrayList[j];
                j++;
                k++;
            }
        }
        
        while(i<=mid){
            temp[k] = arrayList[i];
            ++i;
            ++k;
        }
        
        while(j<=hi){
            temp[k] = arrayList[j];
            ++j;
            ++k;
        }
        for (int k2 = lo; k2 <= hi; k2++) {
            arrayList[k2] = temp[k2];
        }
        
    }
    
    public  void mergeSort(int lo, int hi) {
        if(lo>=hi) return;
        
        int mid = (lo+hi)/2;
        mergeSort(lo, mid);
        mergeSort(mid +1 , hi);
        merge(lo, mid, hi);
    }

	public double getProbability(int[] seq) {
	    arrayList = seq;
		return 0.0;
	}

}
